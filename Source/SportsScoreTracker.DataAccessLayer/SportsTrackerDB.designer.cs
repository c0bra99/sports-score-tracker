#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportsScoreTracker.DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SportsTracker")]
	public partial class SportsTrackerDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertPrediction(Prediction instance);
    partial void UpdatePrediction(Prediction instance);
    partial void DeletePrediction(Prediction instance);
    partial void InsertRegisteredUser(RegisteredUser instance);
    partial void UpdateRegisteredUser(RegisteredUser instance);
    partial void DeleteRegisteredUser(RegisteredUser instance);
    partial void InsertSport(Sport instance);
    partial void UpdateSport(Sport instance);
    partial void DeleteSport(Sport instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    #endregion
		
		public SportsTrackerDBDataContext() : 
				base(global::SportsScoreTracker.DataAccessLayer.Properties.Settings.Default.SportsTrackerConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SportsTrackerDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsTrackerDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsTrackerDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsTrackerDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<Prediction> Predictions
		{
			get
			{
				return this.GetTable<Prediction>();
			}
		}
		
		public System.Data.Linq.Table<RegisteredUser> RegisteredUsers
		{
			get
			{
				return this.GetTable<RegisteredUser>();
			}
		}
		
		public System.Data.Linq.Table<Sport> Sports
		{
			get
			{
				return this.GetTable<Sport>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		[Function(Name="dbo.GetPredictionResultsByGameID")]
		public ISingleResult<GetPredictionResultsByGameIDResult> GetPredictionResultsByGameID([Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID);
			return ((ISingleResult<GetPredictionResultsByGameIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Prediction_Delete")]
		public int Prediction_Delete([Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TeamID", DbType="Int")] System.Nullable<int> teamID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID, userID, teamID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Prediction_Insert")]
		public int Prediction_Insert([Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TeamID", DbType="Int")] System.Nullable<int> teamID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID, userID, teamID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetCommentsByUserID")]
		public ISingleResult<GetCommentsByUserIDResult> GetCommentsByUserID([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<GetCommentsByUserIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetSports")]
		public ISingleResult<GetSportsResult> GetSports()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetSportsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetLeaguesBySportID")]
		public ISingleResult<GetLeaguesBySportIDResult> GetLeaguesBySportID([Parameter(Name="SportID", DbType="Int")] System.Nullable<int> sportID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sportID);
			return ((ISingleResult<GetLeaguesBySportIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetScheduleByDateRange")]
		public ISingleResult<GetScheduleByDateRangeResult> GetScheduleByDateRange([Parameter(Name="LeagueID", DbType="Int")] System.Nullable<int> leagueID, [Parameter(Name="From", DbType="Date")] System.Nullable<System.DateTime> from, [Parameter(Name="To", DbType="Date")] System.Nullable<System.DateTime> to)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), leagueID, from, to);
			return ((ISingleResult<GetScheduleByDateRangeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.AuthorizeUser")]
		public ISingleResult<AuthorizeUserResult> AuthorizeUser([Parameter(Name="Email", DbType="NVarChar(100)")] string email, [Parameter(Name="Password", DbType="NVarChar(50)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, password);
			return ((ISingleResult<AuthorizeUserResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.CountEmailsRegistered")]
		public ISingleResult<CountEmailsRegisteredResult> CountEmailsRegistered([Parameter(Name="Email", DbType="NVarChar(100)")] string email)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email);
			return ((ISingleResult<CountEmailsRegisteredResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.RegisteredUser_Update")]
		public int RegisteredUser_Update([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="Email", DbType="NVarChar(100)")] string email, [Parameter(Name="FirstName", DbType="NVarChar(50)")] string firstName, [Parameter(Name="LastName", DbType="NVarChar(50)")] string lastName, [Parameter(Name="Password", DbType="NVarChar(50)")] string password, [Parameter(Name="IsAdmin", DbType="Bit")] System.Nullable<bool> isAdmin)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, email, firstName, lastName, password, isAdmin);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.RegisteredUser_Insert")]
		public int RegisteredUser_Insert([Parameter(Name="Email", DbType="NVarChar(100)")] string email, [Parameter(Name="FirstName", DbType="NVarChar(50)")] string firstName, [Parameter(Name="LastName", DbType="NVarChar(50)")] string lastName, [Parameter(Name="Password", DbType="NVarChar(50)")] string password, [Parameter(Name="IsAdmin", DbType="Bit")] System.Nullable<bool> isAdmin)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, firstName, lastName, password, isAdmin);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.ChangePassword")]
		public int ChangePassword([Parameter(Name="Email", DbType="NVarChar(100)")] string email, [Parameter(Name="Password", DbType="NVarChar(50)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, password);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetCommentsByGameID")]
		public ISingleResult<GetCommentsByGameIDResult> GetCommentsByGameID([Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID);
			return ((ISingleResult<GetCommentsByGameIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Comment_Delete")]
		public int Comment_Delete([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetGameToDisplay")]
		public ISingleResult<GetGameToDisplayResult> GetGameToDisplay([Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID);
			return ((ISingleResult<GetGameToDisplayResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Sport_Update")]
		public int Sport_Update([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.League_Delete")]
		public int League_Delete([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.League_Insert")]
		public int League_Insert([Parameter(Name="SportID", DbType="Int")] System.Nullable<int> sportID, [Parameter(Name="RegisteredUserID", DbType="Int")] System.Nullable<int> registeredUserID, [Parameter(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sportID, registeredUserID, name);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.League_Update")]
		public int League_Update([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="SportID", DbType="Int")] System.Nullable<int> sportID, [Parameter(Name="RegisteredUserID", DbType="Int")] System.Nullable<int> registeredUserID, [Parameter(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, sportID, registeredUserID, name);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetLeaguesByUserID")]
		public ISingleResult<GetLeaguesByUserIDResult> GetLeaguesByUserID([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<GetLeaguesByUserIDResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Team_Update")]
		public int Team_Update([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="LeagueID", DbType="Int")] System.Nullable<int> leagueID, [Parameter(Name="Name", DbType="NVarChar(100)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, leagueID, name);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Game_Update")]
		public int Game_Update([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="HomeTeamID", DbType="Int")] System.Nullable<int> homeTeamID, [Parameter(Name="AwayTeamID", DbType="Int")] System.Nullable<int> awayTeamID, [Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="HomeScore", DbType="Int")] System.Nullable<int> homeScore, [Parameter(Name="AwayScore", DbType="Int")] System.Nullable<int> awayScore)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, homeTeamID, awayTeamID, date, homeScore, awayScore);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Team_Insert")]
		public int Team_Insert([Parameter(Name="LeagueID", DbType="Int")] System.Nullable<int> leagueID, [Parameter(Name="Name", DbType="NVarChar(100)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), leagueID, name);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Sport_Insert")]
		public int Sport_Insert([Parameter(Name="Name", DbType="NVarChar(50)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Game_Insert")]
		public int Game_Insert([Parameter(Name="HomeTeamID", DbType="Int")] System.Nullable<int> homeTeamID, [Parameter(Name="AwayTeamID", DbType="Int")] System.Nullable<int> awayTeamID, [Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="HomeScore", DbType="Int")] System.Nullable<int> homeScore, [Parameter(Name="AwayScore", DbType="Int")] System.Nullable<int> awayScore)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), homeTeamID, awayTeamID, date, homeScore, awayScore);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Comment_Insert")]
		public int Comment_Insert([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID, [Parameter(Name="Type", DbType="SmallInt")] System.Nullable<short> type, [Parameter(Name="Timestamp", DbType="DateTime")] System.Nullable<System.DateTime> timestamp, [Parameter(Name="Text", DbType="NVarChar(1000)")] string text)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, gameID, type, timestamp, text);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Comment_Update")]
		public int Comment_Update([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="GameID", DbType="Int")] System.Nullable<int> gameID, [Parameter(Name="Type", DbType="SmallInt")] System.Nullable<short> type, [Parameter(Name="Timestamp", DbType="DateTime")] System.Nullable<System.DateTime> timestamp, [Parameter(Name="Text", DbType="NVarChar(1000)")] string text)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, userID, gameID, type, timestamp, text);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Game_Delete")]
		public int Game_Delete([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Team_Delete")]
		public int Team_Delete([Parameter(Name="ID", DbType="Int")] System.Nullable<int> iD)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LeagueID;
		
		private string _Name;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Game> _Games1;
		
		private EntitySet<Prediction> _Predictions;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Team()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
			this._Predictions = new EntitySet<Prediction>(new Action<Prediction>(this.attach_Predictions), new Action<Prediction>(this.detach_Predictions));
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL")]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Team_Game", Storage="_Games", ThisKey="ID", OtherKey="HomeTeamID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[Association(Name="Team_Game1", Storage="_Games1", ThisKey="ID", OtherKey="AwayTeamID")]
		public EntitySet<Game> Games1
		{
			get
			{
				return this._Games1;
			}
			set
			{
				this._Games1.Assign(value);
			}
		}
		
		[Association(Name="Team_Prediction", Storage="_Predictions", ThisKey="ID", OtherKey="TeamID")]
		public EntitySet<Prediction> Predictions
		{
			get
			{
				return this._Predictions;
			}
			set
			{
				this._Predictions.Assign(value);
			}
		}
		
		[Association(Name="League_Team", Storage="_League", ThisKey="LeagueID", OtherKey="ID", IsForeignKey=true)]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._LeagueID = value.ID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
		
		private void attach_Predictions(Prediction entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Predictions(Prediction entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[Table(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _HomeTeamID;
		
		private int _AwayTeamID;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _HomeScore;
		
		private System.Nullable<int> _AwayScore;
		
		private EntitySet<Prediction> _Predictions;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHomeTeamIDChanging(int value);
    partial void OnHomeTeamIDChanged();
    partial void OnAwayTeamIDChanging(int value);
    partial void OnAwayTeamIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnHomeScoreChanging(System.Nullable<int> value);
    partial void OnHomeScoreChanged();
    partial void OnAwayScoreChanging(System.Nullable<int> value);
    partial void OnAwayScoreChanged();
    #endregion
		
		public Game()
		{
			this._Predictions = new EntitySet<Prediction>(new Action<Prediction>(this.attach_Predictions), new Action<Prediction>(this.detach_Predictions));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Team = default(EntityRef<Team>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_HomeTeamID", DbType="Int NOT NULL")]
		public int HomeTeamID
		{
			get
			{
				return this._HomeTeamID;
			}
			set
			{
				if ((this._HomeTeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamIDChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamID = value;
					this.SendPropertyChanged("HomeTeamID");
					this.OnHomeTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_AwayTeamID", DbType="Int NOT NULL")]
		public int AwayTeamID
		{
			get
			{
				return this._AwayTeamID;
			}
			set
			{
				if ((this._AwayTeamID != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamIDChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamID = value;
					this.SendPropertyChanged("AwayTeamID");
					this.OnAwayTeamIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_HomeScore", DbType="Int")]
		public System.Nullable<int> HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[Column(Storage="_AwayScore", DbType="Int")]
		public System.Nullable<int> AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[Association(Name="Game_Prediction", Storage="_Predictions", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Prediction> Predictions
		{
			get
			{
				return this._Predictions;
			}
			set
			{
				this._Predictions.Assign(value);
			}
		}
		
		[Association(Name="Game_Comment", Storage="_Comments", ThisKey="ID", OtherKey="GameID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Team_Game", Storage="_Team", ThisKey="HomeTeamID", OtherKey="ID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._HomeTeamID = value.ID;
					}
					else
					{
						this._HomeTeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="Team_Game1", Storage="_Team1", ThisKey="AwayTeamID", OtherKey="ID", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Games1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Games1.Add(this);
						this._AwayTeamID = value.ID;
					}
					else
					{
						this._AwayTeamID = default(int);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Predictions(Prediction entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Predictions(Prediction entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SportID;
		
		private int _RegisteredUserID;
		
		private string _Name;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<RegisteredUser> _RegisteredUser;
		
		private EntityRef<Sport> _Sport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSportIDChanging(int value);
    partial void OnSportIDChanged();
    partial void OnRegisteredUserIDChanging(int value);
    partial void OnRegisteredUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public League()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._RegisteredUser = default(EntityRef<RegisteredUser>);
			this._Sport = default(EntityRef<Sport>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SportID", DbType="Int NOT NULL")]
		public int SportID
		{
			get
			{
				return this._SportID;
			}
			set
			{
				if ((this._SportID != value))
				{
					if (this._Sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSportIDChanging(value);
					this.SendPropertyChanging();
					this._SportID = value;
					this.SendPropertyChanged("SportID");
					this.OnSportIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegisteredUserID", DbType="Int NOT NULL")]
		public int RegisteredUserID
		{
			get
			{
				return this._RegisteredUserID;
			}
			set
			{
				if ((this._RegisteredUserID != value))
				{
					if (this._RegisteredUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegisteredUserIDChanging(value);
					this.SendPropertyChanging();
					this._RegisteredUserID = value;
					this.SendPropertyChanged("RegisteredUserID");
					this.OnRegisteredUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="League_Team", Storage="_Teams", ThisKey="ID", OtherKey="LeagueID")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[Association(Name="RegisteredUser_League", Storage="_RegisteredUser", ThisKey="RegisteredUserID", OtherKey="ID", IsForeignKey=true)]
		public RegisteredUser RegisteredUser
		{
			get
			{
				return this._RegisteredUser.Entity;
			}
			set
			{
				RegisteredUser previousValue = this._RegisteredUser.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredUser.Entity = null;
						previousValue.Leagues.Remove(this);
					}
					this._RegisteredUser.Entity = value;
					if ((value != null))
					{
						value.Leagues.Add(this);
						this._RegisteredUserID = value.ID;
					}
					else
					{
						this._RegisteredUserID = default(int);
					}
					this.SendPropertyChanged("RegisteredUser");
				}
			}
		}
		
		[Association(Name="Sport_League", Storage="_Sport", ThisKey="SportID", OtherKey="ID", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.Leagues.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.Leagues.Add(this);
						this._SportID = value.ID;
					}
					else
					{
						this._SportID = default(int);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[Table(Name="dbo.Prediction")]
	public partial class Prediction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private int _UserID;
		
		private int _TeamID;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<RegisteredUser> _RegisteredUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    #endregion
		
		public Prediction()
		{
			this._Game = default(EntityRef<Game>);
			this._Team = default(EntityRef<Team>);
			this._RegisteredUser = default(EntityRef<RegisteredUser>);
			OnCreated();
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegisteredUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[Association(Name="Game_Prediction", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Predictions.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Predictions.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[Association(Name="Team_Prediction", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Predictions.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Predictions.Add(this);
						this._TeamID = value.ID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="RegisteredUser_Prediction", Storage="_RegisteredUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegisteredUser RegisteredUser
		{
			get
			{
				return this._RegisteredUser.Entity;
			}
			set
			{
				RegisteredUser previousValue = this._RegisteredUser.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredUser.Entity = null;
						previousValue.Predictions.Remove(this);
					}
					this._RegisteredUser.Entity = value;
					if ((value != null))
					{
						value.Predictions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegisteredUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RegisteredUser")]
	public partial class RegisteredUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Password;
		
		private bool _IsAdmin;
		
		private EntitySet<League> _Leagues;
		
		private EntitySet<Prediction> _Predictions;
		
		private EntitySet<Comment> _Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    #endregion
		
		public RegisteredUser()
		{
			this._Leagues = new EntitySet<League>(new Action<League>(this.attach_Leagues), new Action<League>(this.detach_Leagues));
			this._Predictions = new EntitySet<Prediction>(new Action<Prediction>(this.attach_Predictions), new Action<Prediction>(this.detach_Predictions));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[Association(Name="RegisteredUser_League", Storage="_Leagues", ThisKey="ID", OtherKey="RegisteredUserID")]
		public EntitySet<League> Leagues
		{
			get
			{
				return this._Leagues;
			}
			set
			{
				this._Leagues.Assign(value);
			}
		}
		
		[Association(Name="RegisteredUser_Prediction", Storage="_Predictions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Prediction> Predictions
		{
			get
			{
				return this._Predictions;
			}
			set
			{
				this._Predictions.Assign(value);
			}
		}
		
		[Association(Name="RegisteredUser_Comment", Storage="_Comments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = this;
		}
		
		private void detach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = null;
		}
		
		private void attach_Predictions(Prediction entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = this;
		}
		
		private void detach_Predictions(Prediction entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.RegisteredUser = null;
		}
	}
	
	[Table(Name="dbo.Sport")]
	public partial class Sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<League> _Leagues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sport()
		{
			this._Leagues = new EntitySet<League>(new Action<League>(this.attach_Leagues), new Action<League>(this.detach_Leagues));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Sport_League", Storage="_Leagues", ThisKey="ID", OtherKey="SportID")]
		public EntitySet<League> Leagues
		{
			get
			{
				return this._Leagues;
			}
			set
			{
				this._Leagues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
	}
	
	[Table(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _GameID;
		
		private System.Nullable<short> _Type;
		
		private System.DateTime _Timestamp;
		
		private string _Text;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<RegisteredUser> _RegisteredUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnTypeChanging(System.Nullable<short> value);
    partial void OnTypeChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Comment()
		{
			this._Game = default(EntityRef<Game>);
			this._RegisteredUser = default(EntityRef<RegisteredUser>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegisteredUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="SmallInt")]
		public System.Nullable<short> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(1000)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="Game_Comment", Storage="_Game", ThisKey="GameID", OtherKey="ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._GameID = value.ID;
					}
					else
					{
						this._GameID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[Association(Name="RegisteredUser_Comment", Storage="_RegisteredUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegisteredUser RegisteredUser
		{
			get
			{
				return this._RegisteredUser.Entity;
			}
			set
			{
				RegisteredUser previousValue = this._RegisteredUser.Entity;
				if (((previousValue != value) 
							|| (this._RegisteredUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisteredUser.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._RegisteredUser.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegisteredUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetPredictionResultsByGameIDResult
	{
		
		private int _TeamID;
		
		private System.Nullable<int> _Vote;
		
		public GetPredictionResultsByGameIDResult()
		{
		}
		
		[Column(Storage="_TeamID", DbType="Int NOT NULL")]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this._TeamID = value;
				}
			}
		}
		
		[Column(Storage="_Vote", DbType="Int")]
		public System.Nullable<int> Vote
		{
			get
			{
				return this._Vote;
			}
			set
			{
				if ((this._Vote != value))
				{
					this._Vote = value;
				}
			}
		}
	}
	
	public partial class GetCommentsByUserIDResult
	{
		
		private int _ID;
		
		private int _UserID;
		
		private int _GameID;
		
		private System.Nullable<short> _Type;
		
		private System.DateTime _Timestamp;
		
		private string _Text;
		
		public GetCommentsByUserIDResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="SmallInt")]
		public System.Nullable<short> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(1000)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this._Text = value;
				}
			}
		}
	}
	
	public partial class GetSportsResult
	{
		
		private int _ID;
		
		private string _Name;
		
		public GetSportsResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class GetLeaguesBySportIDResult
	{
		
		private int _ID;
		
		private int _SportID;
		
		private int _RegisteredUserID;
		
		private string _Name;
		
		public GetLeaguesBySportIDResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_SportID", DbType="Int NOT NULL")]
		public int SportID
		{
			get
			{
				return this._SportID;
			}
			set
			{
				if ((this._SportID != value))
				{
					this._SportID = value;
				}
			}
		}
		
		[Column(Storage="_RegisteredUserID", DbType="Int NOT NULL")]
		public int RegisteredUserID
		{
			get
			{
				return this._RegisteredUserID;
			}
			set
			{
				if ((this._RegisteredUserID != value))
				{
					this._RegisteredUserID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class GetScheduleByDateRangeResult
	{
		
		private int _GameID;
		
		private System.DateTime _Date;
		
		private string _AwayTeam;
		
		private string _HomeTeam;
		
		public GetScheduleByDateRangeResult()
		{
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_AwayTeam", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AwayTeam
		{
			get
			{
				return this._AwayTeam;
			}
			set
			{
				if ((this._AwayTeam != value))
				{
					this._AwayTeam = value;
				}
			}
		}
		
		[Column(Storage="_HomeTeam", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					this._HomeTeam = value;
				}
			}
		}
	}
	
	public partial class AuthorizeUserResult
	{
		
		private int _ID;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Password;
		
		private bool _IsAdmin;
		
		public AuthorizeUserResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[Column(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this._IsAdmin = value;
				}
			}
		}
	}
	
	public partial class CountEmailsRegisteredResult
	{
		
		private System.Nullable<int> _UsersFoundWithEmailAddress;
		
		public CountEmailsRegisteredResult()
		{
		}
		
		[Column(Storage="_UsersFoundWithEmailAddress", DbType="Int")]
		public System.Nullable<int> UsersFoundWithEmailAddress
		{
			get
			{
				return this._UsersFoundWithEmailAddress;
			}
			set
			{
				if ((this._UsersFoundWithEmailAddress != value))
				{
					this._UsersFoundWithEmailAddress = value;
				}
			}
		}
	}
	
	public partial class GetCommentsByGameIDResult
	{
		
		private string _FirstName;
		
		private int _CommentID;
		
		private System.Nullable<short> _Type;
		
		private System.DateTime _Timestamp;
		
		private string _Text;
		
		public GetCommentsByGameIDResult()
		{
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this._CommentID = value;
				}
			}
		}
		
		[Column(Storage="_Type", DbType="SmallInt")]
		public System.Nullable<short> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(300)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this._Text = value;
				}
			}
		}
	}
	
	public partial class GetGameToDisplayResult
	{
		
		private System.DateTime _GameDate;
		
		private string _AwayTeam;
		
		private string _HomeTeam;
		
		private System.Nullable<int> _AwayScore;
		
		private System.Nullable<int> _HomeScore;
		
		private System.Nullable<int> _AwayTeamVotes;
		
		private System.Nullable<int> _HomeTeamVotes;
		
		private System.Nullable<int> _AwayWins;
		
		private System.Nullable<int> _AwayLosses;
		
		private System.Nullable<double> _AwayWinningPercentage;
		
		private System.Nullable<int> _HomeWins;
		
		private System.Nullable<int> _HomeLosses;
		
		private System.Nullable<double> _HomeWinningPercentage;
		
		public GetGameToDisplayResult()
		{
		}
		
		[Column(Storage="_GameDate", DbType="DateTime NOT NULL")]
		public System.DateTime GameDate
		{
			get
			{
				return this._GameDate;
			}
			set
			{
				if ((this._GameDate != value))
				{
					this._GameDate = value;
				}
			}
		}
		
		[Column(Storage="_AwayTeam", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AwayTeam
		{
			get
			{
				return this._AwayTeam;
			}
			set
			{
				if ((this._AwayTeam != value))
				{
					this._AwayTeam = value;
				}
			}
		}
		
		[Column(Storage="_HomeTeam", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					this._HomeTeam = value;
				}
			}
		}
		
		[Column(Storage="_AwayScore", DbType="Int")]
		public System.Nullable<int> AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this._AwayScore = value;
				}
			}
		}
		
		[Column(Storage="_HomeScore", DbType="Int")]
		public System.Nullable<int> HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this._HomeScore = value;
				}
			}
		}
		
		[Column(Storage="_AwayTeamVotes", DbType="Int")]
		public System.Nullable<int> AwayTeamVotes
		{
			get
			{
				return this._AwayTeamVotes;
			}
			set
			{
				if ((this._AwayTeamVotes != value))
				{
					this._AwayTeamVotes = value;
				}
			}
		}
		
		[Column(Storage="_HomeTeamVotes", DbType="Int")]
		public System.Nullable<int> HomeTeamVotes
		{
			get
			{
				return this._HomeTeamVotes;
			}
			set
			{
				if ((this._HomeTeamVotes != value))
				{
					this._HomeTeamVotes = value;
				}
			}
		}
		
		[Column(Storage="_AwayWins", DbType="Int")]
		public System.Nullable<int> AwayWins
		{
			get
			{
				return this._AwayWins;
			}
			set
			{
				if ((this._AwayWins != value))
				{
					this._AwayWins = value;
				}
			}
		}
		
		[Column(Storage="_AwayLosses", DbType="Int")]
		public System.Nullable<int> AwayLosses
		{
			get
			{
				return this._AwayLosses;
			}
			set
			{
				if ((this._AwayLosses != value))
				{
					this._AwayLosses = value;
				}
			}
		}
		
		[Column(Storage="_AwayWinningPercentage", DbType="Float")]
		public System.Nullable<double> AwayWinningPercentage
		{
			get
			{
				return this._AwayWinningPercentage;
			}
			set
			{
				if ((this._AwayWinningPercentage != value))
				{
					this._AwayWinningPercentage = value;
				}
			}
		}
		
		[Column(Storage="_HomeWins", DbType="Int")]
		public System.Nullable<int> HomeWins
		{
			get
			{
				return this._HomeWins;
			}
			set
			{
				if ((this._HomeWins != value))
				{
					this._HomeWins = value;
				}
			}
		}
		
		[Column(Storage="_HomeLosses", DbType="Int")]
		public System.Nullable<int> HomeLosses
		{
			get
			{
				return this._HomeLosses;
			}
			set
			{
				if ((this._HomeLosses != value))
				{
					this._HomeLosses = value;
				}
			}
		}
		
		[Column(Storage="_HomeWinningPercentage", DbType="Float")]
		public System.Nullable<double> HomeWinningPercentage
		{
			get
			{
				return this._HomeWinningPercentage;
			}
			set
			{
				if ((this._HomeWinningPercentage != value))
				{
					this._HomeWinningPercentage = value;
				}
			}
		}
	}
	
	public partial class GetLeaguesByUserIDResult
	{
		
		private int _ID;
		
		private int _SportID;
		
		private int _RegisteredUserID;
		
		private string _Name;
		
		public GetLeaguesByUserIDResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_SportID", DbType="Int NOT NULL")]
		public int SportID
		{
			get
			{
				return this._SportID;
			}
			set
			{
				if ((this._SportID != value))
				{
					this._SportID = value;
				}
			}
		}
		
		[Column(Storage="_RegisteredUserID", DbType="Int NOT NULL")]
		public int RegisteredUserID
		{
			get
			{
				return this._RegisteredUserID;
			}
			set
			{
				if ((this._RegisteredUserID != value))
				{
					this._RegisteredUserID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
